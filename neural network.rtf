{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The Python implementation can be divided into two main parts: trainNN and testNN. Besides, preparing the training data set as well as testing data set are significant, which uses imread function for turning 30x32-pixel PGM image into a 30-by-32 uint8 matrix and reshape function for transforming the matrix to a vector with 960 entries. At last, we will obtain training data set datanupx as 184x960 matrix and datanupy as 184x1 matrix, what\'92s more, the testing data set datanupx2 as 83x960 matrix and datanupy2 as 83x1 matrix.
\f1\fs24 \

\f0\fs29\fsmilli14667 In the trainNN part, data preprocessing comes to be the first step. In that, we add x0 into the matrix and divide datanupx by 255 in order to range entries from 0 to 1. In feedforward step, we random numbers between -1 and 1 as randomw because of the low accuracy caused by random range (-1000,1000). As randomw multiplied with datanupx to be inputs of sigmoid function, we would gain the final deltas. In backpropagation, according to different formulas, we update randomws by the deltas indicating difference between prediction and true value for each image. 
\f1\fs24 \

\f0\fs29\fsmilli14667 In the trainNN part, after randomws being trained, we multiply the test data set with trained randomws and calculate the predictions, which are larger than 0.5 to 1 and otherwise to 0. The predictions need to be compared by datanupy2 which are true values of 0 and 1, generated by checking if the file name of a given image contains the word \'93down\'94. At last, we are able to compute the accuracy which is the ratio of matches to the total number of test images.
\f1\fs24 \

\f0\fs29\fsmilli14667 There are two different kinds of loop: 1000 epoch running, within each going through all 184 training images and 1000 epoch running, within each going through random 1 training image.
\f1\fs24 \

\f0\fs29\fsmilli14667 The former kind is explained and executed by annotation in python.
\f1\fs24 \

\f0\fs29\fsmilli14667 The calculation will take about 15 minutes and the accuracy of running 1000 epochs, within each going through all 184 training image on test set and the predictions on 83 test images are as follows:
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 prediction_list = \'a0['True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'True', 'False', 'True', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'True', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'True', 'False', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'False']
\f1\fs24 \

\f2\fs29\fsmilli14667 accuracy = \'a00.903614457831
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 The calculation will take about 10 seconds and the accuracy of running 1000 epochs, within each going through random 1 training image on test set and the predictions on 83 test images are as follows:
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 prediction_list = \'a0['True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'False', 'False', 'False', 'False']
\f1\fs24 \

\f2\fs29\fsmilli14667 accuracy = \'a00.939759036145
\f1\fs24 \
}